diff --git a/dist/index.js b/dist/index.js
index 800434e9a0d721c47b6909b9230209b5adc15053..7eeefe99608ef997e952eace448bf59fdc07f93e 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,7 +1,7 @@
 import { fetch } from "@tauri-apps/plugin-http";
 import { md5 } from "./md5";
 
-export class LastFM {
+export default class LastFM {
     /**
      * Represents a LastFM API client.
      * @param {Object} options - The options for the LastFM client.
@@ -27,26 +27,53 @@ export class LastFM {
         this.user = new User(this);
     }
 
-    paramsToString(params, urlEncoded = true) {
-        let string = '';
+    paramsToUrlString(params) {
+        let string = `?method=${params.method}`;
 
-        for (let key in params) {
-            if (key == null) continue;
+        Object.keys(params).sort().forEach(key => {
+            if (key == 'method' || key == null) return;
             // Convert tags arrays to comma-separated strings
             if (key == 'tags') {
                 params[key] = params[key].join(',');
             }
 
-            if (urlEncoded) {
-                string += '&' + key + '=' + encodeURIComponent(params[key]);
-            } else {
-                string += key + params[key];
+            string += '&' + key + '=' + encodeURIComponent(params[key]);
+        });
+
+        return string;
+    }
+
+    paramsToString(params) {
+        let string = '';
+
+        Object.keys(params).sort().forEach(key => {
+            if (key == null) return;
+            // Convert tags arrays to comma-separated strings
+            if (key == 'tags') {
+                params[key] = params[key].join(',');
             }
-        }
+
+            string += key + params[key];
+        });
 
         return string;
     }
 
+    async GET(params) {
+        return fetch(this.apiUrl + this.paramsToUrlString(params))
+            .then(res => res.json())
+            .then(data => {
+                console.log(`[LastFM] Response: ${JSON.stringify(data)}`);
+                return data;
+            })
+            .catch(err => console.error(err));
+    }
+
+    async POST(params) {
+        return fetch(this.apiUrl + "?format=json", { method: 'POST', body: new URLSearchParams(params) })
+            .catch(err => console.error(err));
+    }
+
     /**
      * Make a request to the LastFM API.
      * @param {string} endpoint - The endpoint to request.
@@ -55,27 +82,18 @@ export class LastFM {
      * @returns {Promise<Object>}
      */
     async request(endpoint, params, method = 'GET') {
-        let url = this.apiUrl + '?method=' + endpoint + '&api_key=' + this.apiKey + '&format=json';
-
-        url += this.paramsToString(params);
-
-        if (this.verbose) {
-            console.log(`[LastFM] Requesting ${url}`);
+        params = {
+            ...params,
+            method: endpoint,
+            api_key: this.apiKey,
+            format: 'json'
         }
-    
-        if (method === 'POST') {
-            return fetch(url, { method: method, body: JSON.stringify(params) })
-                .then(res => res.json())
-                .then(data => {
-                    return data;
-                });
+        
+        if (this.verbose) {
+            console.log(`[LastFM] Requesting ${this.apiUrl} with ${JSON.stringify(params)}`);
         }
-    
-        return fetch(url)
-            .then(res => res.json())
-            .then(data => {
-                return data;
-            });
+
+        return method == 'GET' ? this.GET(params) : this.POST(params);
     }
 
     /**
@@ -85,14 +103,29 @@ export class LastFM {
      * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
      * @param {string} [method='GET'] - The HTTP method to use.
      * @returns {Promise<Object>}
+     * @see {@link https://www.last.fm/api/desktopauth#_6-sign-your-calls}
      */
     async requestSigned(endpoint, params, sk, method = 'GET') {
-        let paramsString = this.paramsToString(params, false);
-        let api_sig = md5(`api_key${this.apiKey}method${endpoint}${paramsString}${this.apiSecret}`);
+        params = {
+            ...params,
+            method: endpoint,
+            api_key: this.apiKey
+        }
+
+        if (sk) {
+            params.sk = sk;
+        }
 
-        if (sk == null) return this.request(endpoint, { ...params, api_sig }, method);
+        let paramsString = this.paramsToString(params);
+        console.log(paramsString);
+        params.api_sig = md5(`${paramsString}${this.apiSecret}`);
+        params.format = 'json';
 
-        return this.request(endpoint, { ...params, api_sig, sk }, method);
+        if (this.verbose) {
+            console.log(`[LastFM] Requesting ${this.apiUrl} with ${JSON.stringify(params)}`);
+        }
+
+        return method == 'GET' ? this.GET(params) : this.POST(params);
     }
 }
 
@@ -348,6 +381,7 @@ class Artist {
 
 class Auth {
     #client;
+    #token;
 
     /**
      * Represents the Auth API for LastFM.
@@ -360,22 +394,34 @@ class Auth {
 
     /**
      * This is a helper function to generate the OAuth URL for the user to authorize the application.
-     * @param {string} token - A 32-character ASCII hexadecimal MD5 hash returned by step 1 of the authentication process (following the granting of permissions to the application by the user).
+     * @param {string} [token] - A 32-character ASCII hexadecimal MD5 hash returned by step 1 of the authentication process (following the granting of permissions to the application by the user).
      * @returns {Promise<string>}
      * @see {@link https://www.last.fm/api/authentication}
      */
-    async getAuthUrl(token) {
-        return `http://www.last.fm/api/auth/?api_key=${this.#client.apiKey}&token=${token}`
+    async getAuthUrl(token = null) {
+        if (token == null) {
+            token = await this.getToken();
+        }
+        this.#token = token;
+
+        return `http://www.last.fm/api/auth/?api_key=${this.#client.apiKey}&token=${token}`;
     }
 
     /**
      * Fetch a session key for a user. The third step in the authentication process. See the {@link https://www.last.fm/api/authentication|authentication how-to} for more information.
-     * @param {Object} params 
-     * @param {string} params.token - A 32-character ASCII hexadecimal MD5 hash returned by step 1 of the authentication process (following the granting of permissions to the application by the user)
+     * @param {string} [token] - A 32-character ASCII hexadecimal MD5 hash returned by step 1 of the authentication process (following the granting of permissions to the application by the user)
      * @returns {Promise<Object>}
      */
-    async getSession(params) {
-        return this.#client.requestSigned('auth.getSession', params, null);
+    async getSession(token = null) {
+        if (token == null) {
+            token = this.#token;
+        }
+
+        let data = await this.#client.requestSigned('auth.getSession', { token }, null);
+        // Tokens should be invalid after use, but we'll clear it just in case
+        this.#token = null;
+
+        return data.session;
     }
 
     /**
@@ -384,7 +430,6 @@ class Auth {
      */
     async getToken() {
         let data = await this.#client.request('auth.getToken', {});
-        console.log(`Token: ${data.token}`);
         return data.token;
     }
 }
